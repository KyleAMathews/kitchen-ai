export default [
  {
    "statements": [
      "CREATE TABLE \"ingredients_photo_uploads\" (\n  \"id\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  \"uploaded_at\" TEXT,\n  \"state\" TEXT NOT NULL,\n  \"upload_duration_sec\" REAL,\n  \"ai_processing_duration_sec\" REAL,\n  \"photo_url\" TEXT,\n  CONSTRAINT \"ingredients_photo_uploads_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"ingredients\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"is_reviewed\" INTEGER NOT NULL,\n  \"fill_level\" INTEGER NOT NULL,\n  \"shelf_life_months\" INTEGER NOT NULL,\n  \"fill_date\" TEXT NOT NULL,\n  \"is_ground\" INTEGER,\n  \"ingredients_photo_uploads_id\" TEXT,\n  CONSTRAINT \"ingredients_ingredients_photo_uploads_id_fkey\" FOREIGN KEY (\"ingredients_photo_uploads_id\") REFERENCES \"ingredients_photo_uploads\" (\"id\"),\n  CONSTRAINT \"ingredients_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.ingredients_photo_uploads', 1);",
      "  /* Triggers for table ingredients_photo_uploads */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_ingredients_photo_uploads_primarykey;",
      "CREATE TRIGGER update_ensure_main_ingredients_photo_uploads_primarykey\n  BEFORE UPDATE ON \"main\".\"ingredients_photo_uploads\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_ingredients_photo_uploads_into_oplog;",
      "CREATE TRIGGER insert_main_ingredients_photo_uploads_into_oplog\n   AFTER INSERT ON \"main\".\"ingredients_photo_uploads\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ingredients_photo_uploads')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ingredients_photo_uploads', 'INSERT', json_object('id', new.\"id\"), json_object('ai_processing_duration_sec', cast(new.\"ai_processing_duration_sec\" as TEXT), 'created_at', new.\"created_at\", 'id', new.\"id\", 'photo_url', new.\"photo_url\", 'state', new.\"state\", 'upload_duration_sec', cast(new.\"upload_duration_sec\" as TEXT), 'uploaded_at', new.\"uploaded_at\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_ingredients_photo_uploads_into_oplog;",
      "CREATE TRIGGER update_main_ingredients_photo_uploads_into_oplog\n   AFTER UPDATE ON \"main\".\"ingredients_photo_uploads\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ingredients_photo_uploads')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ingredients_photo_uploads', 'UPDATE', json_object('id', new.\"id\"), json_object('ai_processing_duration_sec', cast(new.\"ai_processing_duration_sec\" as TEXT), 'created_at', new.\"created_at\", 'id', new.\"id\", 'photo_url', new.\"photo_url\", 'state', new.\"state\", 'upload_duration_sec', cast(new.\"upload_duration_sec\" as TEXT), 'uploaded_at', new.\"uploaded_at\"), json_object('ai_processing_duration_sec', cast(old.\"ai_processing_duration_sec\" as TEXT), 'created_at', old.\"created_at\", 'id', old.\"id\", 'photo_url', old.\"photo_url\", 'state', old.\"state\", 'upload_duration_sec', cast(old.\"upload_duration_sec\" as TEXT), 'uploaded_at', old.\"uploaded_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_ingredients_photo_uploads_into_oplog;",
      "CREATE TRIGGER delete_main_ingredients_photo_uploads_into_oplog\n   AFTER DELETE ON \"main\".\"ingredients_photo_uploads\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ingredients_photo_uploads')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ingredients_photo_uploads', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('ai_processing_duration_sec', cast(old.\"ai_processing_duration_sec\" as TEXT), 'created_at', old.\"created_at\", 'id', old.\"id\", 'photo_url', old.\"photo_url\", 'state', old.\"state\", 'upload_duration_sec', cast(old.\"upload_duration_sec\" as TEXT), 'uploaded_at', old.\"uploaded_at\"), NULL);\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.ingredients', 1);",
      "  /* Triggers for table ingredients */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_ingredients_primarykey;",
      "CREATE TRIGGER update_ensure_main_ingredients_primarykey\n  BEFORE UPDATE ON \"main\".\"ingredients\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_ingredients_into_oplog;",
      "CREATE TRIGGER insert_main_ingredients_into_oplog\n   AFTER INSERT ON \"main\".\"ingredients\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ingredients')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ingredients', 'INSERT', json_object('id', new.\"id\"), json_object('fill_date', new.\"fill_date\", 'fill_level', new.\"fill_level\", 'id', new.\"id\", 'ingredients_photo_uploads_id', new.\"ingredients_photo_uploads_id\", 'is_ground', new.\"is_ground\", 'is_reviewed', new.\"is_reviewed\", 'name', new.\"name\", 'shelf_life_months', new.\"shelf_life_months\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_ingredients_into_oplog;",
      "CREATE TRIGGER update_main_ingredients_into_oplog\n   AFTER UPDATE ON \"main\".\"ingredients\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ingredients')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ingredients', 'UPDATE', json_object('id', new.\"id\"), json_object('fill_date', new.\"fill_date\", 'fill_level', new.\"fill_level\", 'id', new.\"id\", 'ingredients_photo_uploads_id', new.\"ingredients_photo_uploads_id\", 'is_ground', new.\"is_ground\", 'is_reviewed', new.\"is_reviewed\", 'name', new.\"name\", 'shelf_life_months', new.\"shelf_life_months\"), json_object('fill_date', old.\"fill_date\", 'fill_level', old.\"fill_level\", 'id', old.\"id\", 'ingredients_photo_uploads_id', old.\"ingredients_photo_uploads_id\", 'is_ground', old.\"is_ground\", 'is_reviewed', old.\"is_reviewed\", 'name', old.\"name\", 'shelf_life_months', old.\"shelf_life_months\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_ingredients_into_oplog;",
      "CREATE TRIGGER delete_main_ingredients_into_oplog\n   AFTER DELETE ON \"main\".\"ingredients\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ingredients')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ingredients', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('fill_date', old.\"fill_date\", 'fill_level', old.\"fill_level\", 'id', old.\"id\", 'ingredients_photo_uploads_id', old.\"ingredients_photo_uploads_id\", 'is_ground', old.\"is_ground\", 'is_reviewed', old.\"is_reviewed\", 'name', old.\"name\", 'shelf_life_months', old.\"shelf_life_months\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_ingredients_ingredients_photo_uploads_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_ingredients_ingredients_photo_uploads_id_into_oplog\n  AFTER INSERT ON \"main\".\"ingredients\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ingredients_photo_uploads') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'ingredients_photo_uploads', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"ingredients_photo_uploads\" WHERE \"id\" = new.\"ingredients_photo_uploads_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_ingredients_ingredients_photo_uploads_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_ingredients_ingredients_photo_uploads_id_into_oplog\n   AFTER UPDATE ON \"main\".\"ingredients\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ingredients_photo_uploads') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'ingredients_photo_uploads', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"ingredients_photo_uploads\" WHERE \"id\" = new.\"ingredients_photo_uploads_id\";\nEND;"
    ],
    "version": "1"
  }
]