import {
  createStyleObject,
  createStyleString,
  createFontStack,
} from "@capsizecss/core"
import inter from "@capsizecss/metrics/inter"
import arial from "@capsizecss/metrics/arial"
import workSans from "@capsizecss/metrics/workSans"
import montserrat from "@capsizecss/metrics/montserrat"
import caveatBrust from "@capsizecss/metrics/caveatBrush"
import josefin from "@capsizecss/metrics/josefinSans"
import Mustache from "mustache"
import fs from "fs"
import { fromFile } from "@capsizecss/unpack"

const fsPromise = require(`fs`).promises
const path = require(`path`)

async function generateCSSFontFace(directory) {
  try {
    const files = await fsPromise.readdir(directory)
    const fontExtensions = new Set([`.woff`, `.woff2`, `.ttf`, `.eot`])
    const fontFaceCSS = []

    for (const file of files) {
      const ext = path.extname(file)
      if (fontExtensions.has(ext)) {
        // Copy font file to the static directory
        const sourcePath = path.join(directory, file)
        const destinationPath = path.join(`./static`, file)
        await fsPromise.copyFile(sourcePath, destinationPath)
        // console.log(`Copied ${file} to ${destinationPath}`)

        const fontName = path.basename(file, ext)
        const fontFamily = fontName.split(`-`)[0] // Assuming the font family name is before the dash
        const fontStyle = fontName.includes(`Italic`) ? `italic` : `normal`
        let fontWeight = fontName.match(/(?<=-)\w+/)
          ? fontName.match(/(?<=-)\w+/)[0]
          : `normal`

        if (fontWeight.includes(`Negra`)) {
          fontWeight = 700
        } else if (fontWeight.includes(`Gris`)) {
          fontWeight = 400
        } else if (fontWeight.includes(`Blanca`)) {
          fontWeight = 300
        }

        const src = `url('/static/${file}') format('${ext.substring(1)}')`
        const fontFace = `
@font-face {
  font-family: '${fontFamily}';
  src: ${src};
  font-style: ${fontStyle};
  font-weight: ${fontWeight};
}`
        fontFaceCSS.push(fontFace)
      }
    }

    // Write the CSS to a file or use it as needed
    const cssContent = fontFaceCSS.join(`\n`)
    return cssContent
  } catch (error) {
    console.error(`Error generating CSS: ${error}`)
  }
}

const template = `/* Auto-generated by scripts/generate-typography-styles.ts */
/* Override Radix variables */
.radix-themes {
  --default-font-family: {{{defaultFontStack.fontFamily}}};
  --heading-font-family: {{{headingFontStack.fontFamily}}};
{{#fontData}}
  --font-size-{{{i}}}: {{{fontSize}}};
  --line-height-{{{i}}}: {{{lineHeight}}};
{{/fontData}}
}

/* Default text styles */
{{{textStyle}}}

/* For Arial fallback */
{{{fontStack.fontFaces}}}

/* Class names for adding to text elements */
{{#fontData}}
{{{style}}}
{{/fontData}}

body {
  margin: 0;
}


{{{generatedFontFace}}}
`

const fontSizes = [10, 12, 14, 16, 18, 20, 24, 35, 60]
const lineHeights = [16, 20, 24, 26, 26, 28, 32, 40, 60]

async function generate() {
  const generatedFontFace = await generateCSSFontFace(
    `/Users/kylemathews/Downloads/Reforma/Reforma Webfonts/Reforma2018/`
  )
  // console.log(`result`, generatedFontFace)
  const metrics = await fromFile(
    `/Users/kylemathews/Downloads/Reforma/Reforma Webfonts/Reforma2018/Reforma2018-Gris.ttf`
  )
  const generalSansMetrics = await fromFile(
    process.cwd() +
      `/static/GeneralSans_Complete/Fonts/WEB/fonts/GeneralSans-Regular.ttf`
  )
  console.log(metrics)
  metrics.familyName = `Reforma2018`
  const fontData = fontSizes.map((fontSize, i) => {
    const lineGap = lineHeights[i] - fontSize
    console.log({
      fontSize,
      zero: fontSizes[0],
      lineGap,
    })
    const style = createStyleString(`rt-r-size-${i + 1}`, {
      capHeight: fontSize,
      // leading: fontSize * 1.75,
      // leading: lineHeight,
      // lineGap: fontSize / 1.5,
      lineGap,
      fontMetrics: metrics,
    })
    return {
      style,
      ...createStyleObject({
        capHeight: fontSize,
        // leading: fontSize * 1.75,
        lineGap,
        fontMetrics: metrics,
      }),
      i: i + 1,
    }
  })
  console.log({ generalSansMetrics })
  generalSansMetrics.familyName = `GeneralSans`
  const headingFontStack = createFontStack([montserrat, metrics, arial])
  const defaultFontStack = createFontStack([generalSansMetrics, arial])

  const textStyle = createStyleString(`rt-Text`, {
    capHeight: fontSizes[2],
    lineGap: lineHeights[2] - fontSizes[2],
    fontMetrics: metrics,
  })

  fs.writeFileSync(
    `./src/index.css`,
    Mustache.render(template, {
      headingFontStack,
      defaultFontStack,
      fontData,
      generatedFontFace,
      textStyle,
    })
  )
}

generate()
